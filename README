#########################################################################################

README

#########################################################################################

For System Admins

1. Preprocess
The Preprocess module takes the path (path_to_data) to logs of slurm jobs accounting information (sacct), to extract 
Account, ReqMem, Timelimt, ReqNodes, ReqCPUS, QOS, Partition, MaxRSS, CPUTimeRAW and State from the dataset. The 
description of these features can be found at https: //slurm.schedmd.com/sacct.html. The module also asks the admin 
to provide default time-limit (def_time), default quality of service (def_qos) and default partition assignment 
(def_partition) to deal with some of the missing values in the data. Finally, the admin also have the ability to 
specify a set of QOS (sel_qos) and partitions (sel_partition) that they want to select over the entire data. The module
returns Account / QOS factorized levels (.csv), the cleaned dataset (.sav), the standard scalar object (.sav) and a file 
containing system defaults (.csv).

usage: Preprocess.py [-h] -input_data_path INPUT_DATA_PATH [-sep SEP]
                     -output_dir OUTPUT_DIR -sys_name SYS_NAME
                     [-def_qos DEF_QOS] [-def_partition DEF_PARTITION]
                     [-def_time DEF_TIME] [-sel_partition SEL_PARTITION]
                     [-sel_qos SEL_QOS]

optional arguments:
  -h, --help            show this help message and exit
  -input_data_path INPUT_DATA_PATH
                        string; Path to job accounting SLURM logs.
  -sep SEP              char; String separator at each line for file at
                        "input_data_path" (default: |)
  -output_dir OUTPUT_DIR
                        string; Path to output directory to save cleaned data,
                        as well as other intermediary results. If such a
                        directory does not exist, it will be created.
  -sys_name SYS_NAME    string; Name of the HPC System.
  -def_qos DEF_QOS      string; default QOS assignment for the SLURM based HPC
                        system (default: normal). NOTE: Although this is an
                        optional argument, it is highly recommended that a
                        default value is supplied if the default QOS is not
                        "normal" as it is used as a factor for regression.
  -def_partition DEF_PARTITION
                        string; default partition assignment for the SLURM
                        based HPC system (default: name of the system will be
                        used with "default" assuffix, e.g., if sys_name =
                        "uw", partition would be named"uwdefault").
  -def_time DEF_TIME    int; default Timelimit for the SLURM based HPC system
                        in hours (default: 24). NOTE: Although this is an
                        optional argument, it is highly recommended that a
                        default Timelimit is supplied if the default Timelimit
                        is not 24 hours, as it is used as a factor for
                        regression.
  -sel_partition SEL_PARTITION
                        string; A comma (,) separated name of partitions to
                        keep in the data, if desired (e.g. if you want to
                        exclude premium partitions from consideration). All
                        entries with other partitions will be removed
                        (default: None)
  -sel_qos SEL_QOS      string; A comma (,) separated name of QOS to keep in
                        the data, if desired (e.g. if you want to exclude
                        premium QOS from consideration). All entries with
                        other QOS will be removed (default: None)

2. BuildPerAccountModels
Before building the Mixed Account Regression Models (MARM), the admin can evaluate individual regression models to note
what may be most suited to their dataset. Although optional, the BuildPerAccountModels module can provide initial insights 
on the quality of data and can significantly speedup MARM building time by nominating promising regression models for MARM 
over all possibilities. The BuildPerAccountModels module requires the admin to provide the path to processed data (path_to_data), 
independent variables or features (indep_vars) and a dependent variable (dep_vars) to train and evaluate seven popular regression 
models on all data-subsets containing individual Account. At this point, the admin can specify the minimum number of jobs an 
individual Account should have in order to be considered (min_num_jobs). This module reports Account specific R2 and negative RMSE
performance for all regression models, as well as a summary of R2 and negative RMSE over all accounts.

usage: BuildPerAccModels.py [-h] -path_to_data PATH_TO_DATA -output_dir
                            OUTPUT_DIR -sys_name SYS_NAME -dep_vars DEP_VARS
                            [-indep_vars INDEP_VARS]
                            [-min_num_jobs MIN_NUM_JOBS]

optional arguments:
  -h, --help            show this help message and exit
  -path_to_data PATH_TO_DATA
                        string; Full path to cleaned data obtained using
                        PreProcess.
  -output_dir OUTPUT_DIR
                        string; Path to output directory to save results. If
                        such a directory does not exist, it will be created.
  -sys_name SYS_NAME    string; Name of the HPC System.
  -dep_vars DEP_VARS    string; Name of the response variable to regress
                        (options include: CPUTimeRAW or MaxRSS).
  -indep_vars INDEP_VARS
                        string; A semi-colon (,) separated name of factors to
                        be used in building the regression models (default:
                        Timelimit,ReqCPUS,ReqMem,ReqNodes,QOS).
  -min_num_jobs MIN_NUM_JOBS
                        int; The minimum number of jobs under an account for
                        it to be considered for single and mixed account
                        modeling (default: 1000).

3. BuildMixedAccountModels
Once the individual regression models have been evaluated, the admin can select what models should be considered for MARM.
The admin can also decide to select all regression models for MARM. Our BuildMixedAccountModels module requires path to 
processed data (path_to_data), independent variables (indep_vars), dependent variable (dep_vars), the minimum number of 
jobs (min_num_jobs) and the names of the regression models to be considered for MARM (methodnames). This module generates
reports of R2 scores on training and testing partitions of data over increasing number of accounts for all selected regression
models.

usage: BuildMixedAccountModels.py [-h] -path_to_data PATH_TO_DATA -output_dir
                                  OUTPUT_DIR -sys_name SYS_NAME -dep_vars
                                  DEP_VARS [-indep_vars INDEP_VARS]
                                  [-methodnames METHODNAMES]
                                  [-min_num_jobs MIN_NUM_JOBS]

optional arguments:
  -h, --help            show this help message and exit
  -path_to_data PATH_TO_DATA
                        string; Full path to cleaned data obtained using
                        PreProcess.
  -output_dir OUTPUT_DIR
                        string; Path to output directory to save results. If
                        such a directory does not exist, it will be created.
  -sys_name SYS_NAME    string; Name of the HPC System.
  -dep_vars DEP_VARS    string; Name of the response variable to regress
                        (options include: CPUTimeRAW or MaxRSS).
  -indep_vars INDEP_VARS
                        string; A comma (,) separated name of factors to be
                        used in building the regression models (default:
                        Timelimit,ReqCPUS,ReqMem,ReqNodes,QOS).
  -methodnames METHODNAMES
                        string; A comma (,) separated name of ML models to be
                        used to build MARMs. Valid options include any
                        combination of the following regression models: LR,
                        Ridge, LassoLARS, ElasticNet, RandomForest, CART and
                        LightGBM (default: LightGBM,RandomForest,CART).
  -min_num_jobs MIN_NUM_JOBS
                        int; The minimum number of jobs under an account for
                        it to be considered for single and mixed account
                        modeling (default: 1000).

4. TrainSelectedMARM
By considering the results generated by BuildMixedAccountModels module, the admin can determine which regression model 
performs the best along with the best number of accounts to use. Our TrainSelectedMARM module takes the selected regression 
model (sel_model), path to processed data (path_to_data), path to the intermediate results produced by BuildMixedAccountModels 
module (path_to_marm_res) independent variables (indep_vars), dependent variable (dep_vars) and number of accounts (num_acc) 
to build the final MARM for resource prediction. This module generates .pkl files of selected regression models to be used for
subsequent prediction of time and memory.

usage: TrainSelectedMARM.py [-h] -path_to_data PATH_TO_DATA -path_to_marm_res
                            PATH_TO_MARM_RES -num_acc NUM_ACC -output_dir
                            OUTPUT_DIR -sys_name SYS_NAME -dep_vars DEP_VARS
                            [-indep_vars INDEP_VARS] [-sel_model SEL_MODEL]

optional arguments:
  -h, --help            show this help message and exit
  -path_to_data PATH_TO_DATA
                        string; Full path to cleaned data obtained using
                        PreProcess.
  -path_to_marm_res PATH_TO_MARM_RES
                        string; Full path to the directory containing
                        intermediate results produced by
                        BuildMixedAccountModels.
  -num_acc NUM_ACC      int; Number of accounts to choose based on the results
                        produced byBuildMixedAccountModels
  -output_dir OUTPUT_DIR
                        string; Path to output directory to save results. If
                        such a directory does not exist, it will be created.
  -sys_name SYS_NAME    string; Name of the HPC System.
  -dep_vars DEP_VARS    string; Name of the response variable to regress
                        (options include: CPUTimeRAW or MaxRSS).
  -indep_vars INDEP_VARS
                        string; A comma (,) separated name of factors to be
                        used in building the regression models (default:
                        Timelimit,ReqCPUS,ReqMem,ReqNodes,QOS).
  -sel_model SEL_MODEL  string; Name of the selected ML model to be used to
                        build the final MARM. Valid options include: LR,
                        Ridge, LassoLARS, ElasticNet, RandomForest, CART and
                        LightGBM (default: RandomForest).

#########################################################################################

How to prepare the prediction environment for users (For System Admins)

#########################################################################################

Once the admin has used modules 1 through 4 (or 1, 3 and 4) for both time (CPUTimeRAW) and memory (MaxRSS), they should create a 
directory and copy the following files:

a. *QOSHash_Factors.csv, *_StandardScalarModel.sav and *_SysDefault.csv from Preprocess.
b. *_CPUTimeRAW_IndepVars.csv and *_MaxRSS_IndepVars.csv from BuildMixedAccountModels.
c. *_CPUTimeRAW_MARM.pkl and *_MaxRSS_MARM.pkl from TrainSelectedMARM. 

where '*' represents the -sys_name specified by the admin when using the modules. We recommend staying consistent with -sys_name over all
modules when working on the same system.

#########################################################################################

Example (For System Admins)

#########################################################################################

Consider a dataset temp_slurm_raw.txt containing pip (|) separated sacct information.

1. Preprocess
python3 Preprocess.py -input_data_path Data/temp_slurm_raw.txt -output_dir Results/Preproc/ -sys_name Temp -def_qos normal -def_partition TempDefault -def_time 24

2. BuildPerAccountModels
python3 BuildPerAccModels.py -path_to_data Results/Preproc/Temp_processed.sav -output_dir Results/PerAccount/ -sys_name Temp -dep_vars MaxRSS
python3 BuildPerAccModels.py -path_to_data Results/Preproc/Temp_processed.sav -output_dir Results/PerAccount/ -sys_name Temp -dep_vars CPUTimeRAW

3. BuildMixedAccountModels
python3 BuildMixedAccountModels.py -path_to_data Results/Preproc/Temp_processed.sav -output_dir Results/MixedAccount/ -sys_name Temp -dep_vars MaxRSS
python3 BuildMixedAccountModels.py -path_to_data Results/Preproc/Temp_processed.sav -output_dir Results/MixedAccount/ -sys_name Temp -dep_vars CPUTimeRAW

4. TrainSelectedMARM
python3 TrainSelectedMARM.py -path_to_data Results/Preproc/Temp_processed.sav -path_to_marm_res Results/MixedAccount/ -num_acc 10 -output_dir Results/TrainedModel/ -sys_name Temp -dep_vars MaxRSS -sel_model RandomForest
python3 TrainSelectedMARM.py -path_to_data Results/Preproc/Temp_processed.sav -path_to_marm_res Results/MixedAccount/ -num_acc 10 -output_dir Results/TrainedModel/ -sys_name Temp -dep_vars CPUTimeRAW -sel_model RandomForest

Finally, create a directory named Model and move Results/Preproc/TempQOSHash_Factors.csv, Results/Preproc/Temp_StandardScalarModel.sav, 
Results/Preproc/Temp_SysDefault.csv,  Results/MixedAccount/Temp_CPUTimeRAW_IndepVars.csv, Results/MixedAccount/Temp_MaxRSS_IndepVars.csv, 
Results/TrainedModel/Temp_CPUTimeRAW_MARM.pkl and Results/TrainedModel/Temp_MaxRSS_MARM.pkl into Model. The user can now use AMPRO-HPCC to predict time and memory.

#########################################################################################

For Users:

1. AMPRO-HPCC
Finally, the users of the slurm system can use AMPRO-HPCC module by providing a path to their slurm job submission script (path_to_script) 
and path to the utility files (path_to_util) to obtain the recommended values of time and memory. To be conservative and prevent failure 
due to time and memory requirements that may be under-estimates of the actual memory and time utilization, our recommended values are increased 
by 30%.

usage: AMPRO-HPCC.py [-h] -path_to_script PATH_TO_SCRIPT -sys_name SYS_NAME
                     [-path_to_util PATH_TO_UTIL]

optional arguments:
  -h, --help            show this help message and exit
  -path_to_script PATH_TO_SCRIPT
                        string; Full path to the slurm script file.
  -sys_name SYS_NAME    string; Name of the HPC System.
  -path_to_util PATH_TO_UTIL
                        string; Full path to the utility files required for
                        the predictions. This folder should contain the .pkl
                        MARM model, .csv system defaults, .csv independent
                        variables and .sav standard scalar transform. If not
                        provided the files will be searched in the current
                        directory.


#########################################################################################

Example (For Users)

#########################################################################################

Assuming that the system admin has stored the necessary files in a directory named Model/ and the user has a slurm job submission script Job_Example.sh
(please refer to https://slurm.schedmd.com/sbatch.html for the requirements and syntax of a job submission script)

python3 AMPRO-HPCC.py -path_to_script Job_Example.sh -sys_name Temp -path_to_util Model

Output:

Timelimit recommendation : 48.25 hrs
Memory recommendation : 4445.6 MB

#########################################################################################
